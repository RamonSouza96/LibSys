unit Movement.Settings;

interface

uses
  FMX.ListBox, FMX.ComboEdit, FMX.DateTimeCtrls, FMX.Edit, FMX.Memo, System.SysUtils,
  System.DateUtils, FMX.Forms, FMX.ListView.Appearances, System.Generics.Collections,
  FMX.ListView.Types, FMX.ListView, Fmx.Dialogs, System.UITypes, FMX.Types,
  FMX.DialogService, Skia.FMX;

type
  TMovementSettings = class
  private
     const SvgNewExit =
       '<?xml version="1.0" encoding="UTF-8"?>'+
       '<svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" data-name="Layer 1" viewBox="0 0 24 24" width="25" height="25">'+
       '<path d="m23.34,9.481l-3.5-6c-.893-1.53-2.548-2.481-4.319-2.481h-7.069c-1.771,0-3.427.951-4.319,2.481L.632,9.481c-.905,'+
       '1.553-.905,3.483,0,5.038l3.501,6c.893,1.53,2.547,2.48,4.318,2.48h7.069c1.771,0,3.426-.95,4.319-2.48l3.5-6.001c.905-1.554.905-3.484,0-5.038Zm-1.729,'+
       '4.031l-3.499,6c-.536.918-1.529,1.488-2.592,1.488h-7.069c-1.062,0-2.056-.57-2.591-1.488l-3.5-5.999c-.544-.933-.544-2.092,'+
       '0-3.024l3.5-6c.535-.918,1.528-1.489,2.591-1.489h7.069c1.062,0,2.056.57,2.591,1.489l3.5,6c.544.933.544,2.091,0,3.023Zm-4.611-1.512c0,'+
       '.552-.447,1-1,1h-3v3c0,.553-.447,1-1,1s-1-.447-1-1v-3h-3c-.553,0-1-.448-1-1s.447-1,1-1h3v-3c0-.552.447-1,1-1s1,.448,1,1v3h3c.553,0,1,.448,1,1Z"/></svg>';
    const SvgSave =
      '<?xml version="1.0" encoding="UTF-8"?>'+
      '<svg xmlns="http://www.w3.org/2000/svg" id="Outline" viewBox="0 0 24 24" width="25" height="25">'+
      '<path d="M12,10a4,4,0,1,0,4,4A4,4,0,0,0,12,10Zm0,6a2,2,0,1,1,2-2A2,2,0,0,1,12,16Z"/><path d="M22.536,'+
      '4.122,19.878,1.464A4.966,4.966,0,0,0,16.343,0H5A5.006,5.006,0,0,0,0,5V19a5.006,5.006,0,0,0,5,5H19a5.006,'+
      '5.006,0,0,0,5-5V7.657A4.966,4.966,0,0,0,22.536,4.122ZM17,2.08V3a3,3,0,0,1-3,3H10A3,3,0,0,1,7,3V2h9.343A2.953,'+
      '2.953,0,0,1,17,2.08ZM22,19a3,3,0,0,1-3,3H5a3,3,0,0,1-3-3V5A3,3,0,0,1,5,2V3a5.006,5.006,0,0,0,5,5h4a4.991,4.991,'+
      '0,0,0,4.962-4.624l2.16,2.16A3.02,3.02,0,0,1,22,7.657Z"/></svg>';
   public
    const SvgArrowDawn =
     '<?xml version="1.0" encoding="UTF-8"?>'+
     '<svg xmlns="http://www.w3.org/2000/svg" id="Outline" viewBox="0 0 24 24" width="25" height="25">'+
     '<path d="M18.71,8.21a1,1,0,0,0-1.42,0l-4.58,4.58a1,1,0,0,1-1.42,0L6.71,8.21a1,1,0,0,0-1.42,0,1,1,0,'+
     '0,0,0,1.41l4.59,4.59a3,3,0,0,0,4.24,0l4.59-4.59A1,1,0,0,0,18.71,8.21Z"/></svg>';

   const SvgChecked =
     '<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">'+
     '<path fill-rule="evenodd" clip-rule="evenodd" d="M19.7071 6.29289C20.0976 6.68342 20.0976 7.31658 '+
     '19.7071 7.70711L10.4142 17C9.63316 17.7811 8.36683 17.781 7.58579 17L3.29289 12.7071C2.90237 12.3166 '+
     '2.90237 11.6834 3.29289 11.2929C3.68342 10.9024 4.31658 10.9024 4.70711 11.2929L9 15.5858L18.2929 '+
     '6.29289C18.6834 5.90237 19.3166 5.90237 19.7071 6.29289Z" fill="#0F1729"/>'+
     '</svg>';
    class procedure ClearFields;
    class procedure PopulateUserCombobox;
    class procedure PopulateBookCombobox;
    class procedure OpenFormMovement;
    class procedure FormMovementClose;
    class procedure NewMoviment;
    class procedure AddItemLvLivros;
    class procedure PopulateLvMovimento;
    class procedure DeleteItemLvLivros(const Sender: TObject;
        const ItemObject: TListItemDrawable);
    class procedure SaveMoviment;
    class procedure ReceivedBooks(Sender: TObject);
    class procedure DeleteItemCard(Sender: TObject);
  end;

implementation

uses
  Movement.Controller, Movement.View, Main.View, Helpers.HelpsAll, Widgets,
  Movement.List;

class procedure TMovementSettings.ClearFields;
var
 LDataRetorno: TDateTime;
begin
  FormMovement.CbxLivros.ItemIndex := -1;
  FormMovement.CbxUsuarios.ItemIndex := -1;
  FormMovement.EdtUsuarios.Text := EmptyStr;
  FormMovement.EdtLivro.Text := EmptyStr;
  FormMovement.MemObs.Text := EmptyStr;
  FormMovement.DataSaida.Date := Date;
  LDataRetorno := IncDay(Date, 7);
  FormMovement.DataPrevRetorno.Date := LDataRetorno;
  FormMovement.LvLivroSaida.Items.Clear;
end;

class procedure TMovementSettings.DeleteItemCard(Sender: TObject);
begin
  MessageDlg('Deseja realmente deletar o registro?', System.UITypes.TMsgDlgType.mtInformation,
  [System.UITypes.TMsgDlgBtn.mbYes, System.UITypes.TMsgDlgBtn.mbNo], 0,
  procedure(const BotaoPressionado: TModalResult)
  begin
    case BotaoPressionado of
      mrYes:
        begin
          TMovementController.DeleteMovementById(TSkSvg(Sender).tag);
          TMovementSettings.PopulateLvMovimento;
          ShowMessage('Livro Deletado com sucesso!');
        end;
      mrNo:
        begin

        end;
    end;
  end)
end;

class procedure TMovementSettings.DeleteItemLvLivros(const Sender: TObject;
  const ItemObject: TListItemDrawable);
begin
  if ItemObject is TListItemImage then
  begin
    if TListItemImage(ItemObject).Name = 'ImageDeleteItem' then
    begin
      TListView(Sender).Items.Delete(TListView(Sender).Selected.Index);
    end;
  end;
end;

class procedure TMovementSettings.FormMovementClose;
begin
  case FormMovement.BtnNewMSaveM.tag of
    0:
      begin
        FormMain.TabCon.GotoVisibleTab(0);
        FormMovement.RectBookMBackgraund.Parent := FormMovement;
        TMovementSettings.ClearFields;
        FormMovement.Close;
      end;
    1:
      begin
        FormMovement.BtnNewMSaveM.tag := 0;
        FormMovement.BtnNewMSaveM.Text := '   Nova Saida';
        FormMovement.SkSvgActionAddSave.Svg.Source := SvgNewExit;
        TMovementSettings.ClearFields;
        FormMovement.TabConMoviment.GotoVisibleTab(0);
      end;
  end;
end;

class procedure TMovementSettings.NewMoviment;
var
 LUserID: Integer;
 LUserCheck: string;
begin
  case FormMovement.BtnNewMSaveM.tag of
    0:
      begin
        FormMovement.BtnNewMSaveM.tag := 1;
        FormMovement.BtnNewMSaveM.Text := '   Salvar';
        FormMovement.SkSvgActionAddSave.Svg.Source := SvgSave;
        TMovementSettings.ClearFields;
        FormMovement.TabConMoviment.GotoVisibleTab(1);
      end;
    1:
      begin
        if FormMovement.LvLivroSaida.ItemCount = 0 then
        begin
          ShowMessage('Você precisa adicionar pelo menos 1 livro para salvar!');
          Exit;
        end;

        LUserID := FormMovement.CbxUsuarios.ListItems[FormMovement.CbxUsuarios.Selected.Index].Tag;
        LUserCheck := TMovementController.IsUserAvailable(LUserID);

        if LUserCheck <> 'Disponivel' then
        begin
          ShowMessage(LUserCheck);
          Exit;
        end;

        FormMovement.BtnNewMSaveM.tag := 0;
        FormMovement.BtnNewMSaveM.Text := '   Nova Saida';
        FormMovement.SkSvgActionAddSave.Svg.Source := SvgNewExit;
        TMovementSettings.SaveMoviment;
        ShowMessage('Saida do livro registrado com sucesso!');
        TMovementSettings.PopulateLvMovimento;
        TMovementSettings.ClearFields;
        FormMovement.TabConMoviment.GotoVisibleTab(0);
      end;
  end;
end;

class procedure TMovementSettings.OpenFormMovement;
begin
  if not Assigned(FormMovement) then
   Application.CreateForm(TFormMovement, FormMovement);

  THelpsAll.SoftScroll(FormMovement.ScrollMoviment);
  THelpsAll.SoftScroll(FormMovement.ScrollRegister);
  FormMovement.RectBookMBackgraund.Parent := FormMain.TabForm2;
  PopulateUserCombobox;
  PopulateBookCombobox;
  TMovementSettings.PopulateLvMovimento;
  FormMain.TabCon.GotoVisibleTab(1);
end;

class procedure TMovementSettings.PopulateBookCombobox;
var
  LBooks: TArray<TBookData>;
  LBook: TBookData;
  Index: Integer;
begin
  LBooks := TMovementController.GetBooks;
  FormMovement.CbxLivros.Items.Clear;
  for LBook in LBooks do
  begin
    Index := FormMovement.CbxLivros.Items.AddObject(LBook.NomeLivro, TObject(LBook.Id));
    FormMovement.CbxLivros.ListItems[Index].Tag := LBook.Id;
  end;
end;

class procedure TMovementSettings.AddItemLvLivros;
var
  LId: Integer;
  LNome: string;
begin
  LId := FormMovement.CbxLivros.ListItems[FormMovement.CbxLivros.ItemIndex].Tag;
  LNome := FormMovement.CbxLivros.ListItems[FormMovement.CbxLivros.ItemIndex].Text;
  with FormMovement.LvLivroSaida.Items.Add do
  begin
    Tag := LId;
    Data['TextNomeLivro'] := LNome;
    Data['ImageCirlceBlue'] := FormWidgets.SkSvgCircleBlue.MakeScreenshot;
    Data['ImageDeleteItem'] := FormWidgets.SkSvgDelete.MakeScreenshot;
  end;
end;

class procedure TMovementSettings.PopulateLvMovimento;
var
  LMovements: TArray<TMovementData>;
  LMovement: TMovementData;
  LLivros: TArray<TBookData>;
  LStatus: string;
  LColor: TAlphaColor;
begin
  LMovements := TMovementController.GetAllMovements;
  FormMovement.LayMargim.Align := TAlignLayout.None;
  TListMoviment.ClearList(FormMovement.ScrollMoviment);
  for LMovement in LMovements do
  begin
    LLivros := TMovementController.GetBookMoviment(LMovement.Id);
    case LMovement.Status of
     1 : Begin
          LStatus := 'Aguardando';
          LColor  :=  $FF059BF7;
         end;

     2 : Begin
          LStatus := 'Retornado';
          LColor  :=  $FF007B26;
         end;

     3 : Begin
          LStatus := 'Atrasado';
          LColor  :=  $FFF67070;
         end;
    end;

    TListMoviment.CreateCard(FormMovement.ScrollMoviment,
                             LMovement.Id,
                             LMovement.NomeUsuario,
                             DateToStr(LMovement.DataSaida),
                             DateToStr(LMovement.DataPrevRetorno),
                             DateToStr(LMovement.DataRetorno),
                             LStatus,
                             LMovement.Multa,
                             LColor, LLivros);
  end;
  FormMovement.LayMargim.Position.Y := FormMovement.ScrollMoviment.Content.Height + 12000;
  FormMovement.LayMargim.Align := TAlignLayout.Top;
end;

class procedure TMovementSettings.PopulateUserCombobox;
var
  Users: TArray<TUserData>;
  User: TUserData;
  Index: Integer;
  LName: string;
begin
  Users := TMovementController.GetUsers;
  FormMovement.CbxUsuarios.Items.Clear;
  for User in Users do
  begin
   if User.Status = False then
    LName := User.Nome + '/ Bloqueado'
   else
    LName := User.Nome ;

    Index := FormMovement.CbxUsuarios.Items.AddObject(LName, TObject(User.Id));
    FormMovement.CbxUsuarios.ListItems[Index].Tag := User.Id;
  end;
end;

class procedure TMovementSettings.ReceivedBooks(Sender: TObject);
begin
  MessageDlg('Deseja receber o livro?', System.UITypes.TMsgDlgType.mtInformation,
  [System.UITypes.TMsgDlgBtn.mbYes, System.UITypes.TMsgDlgBtn.mbNo], 0,
  procedure(const BotaoPressionado: TModalResult)
  begin
    case BotaoPressionado of
      mrYes:
        begin

          try
           TMovementController.UpdateReceivedBook(TSkSvg(Sender).tag);
           TMovementSettings.PopulateLvMovimento;
          finally
           ShowMessage('Livro Recebido com sucesso!');
          end;

        end;
      mrNo:
        begin

        end;
    end;
  end)
end;

class procedure TMovementSettings.SaveMoviment;
var
  MovementData: TMovementData;
  SelectedBooks: TArray<TBookData>;
  LvItem: TListViewItem;
  BookData: TBookData;
  LUserID: Integer;
  LUserCheck: string;
begin
  // Obter o ID do usuário selecionado
  LUserID := FormMovement.CbxUsuarios.ListItems[FormMovement.CbxUsuarios.Selected.Index].Tag;

  // Preencher os dados do movimento
  MovementData.DataSaida := FormMovement.DataSaida.Date;
  MovementData.DataPrevRetorno := FormMovement.DataPrevRetorno.Date;
  MovementData.UsuarioId := LUserID;
  MovementData.Observacao := FormMovement.MemObs.Text;

  // Preencher os livros selecionados
  SetLength(SelectedBooks, FormMovement.LvLivroSaida.Items.Count);
  for var I := 0 to FormMovement.LvLivroSaida.Items.Count - 1 do
  begin
    LvItem := FormMovement.LvLivroSaida.Items[I];
    BookData.Id := LvItem.Tag;
    SelectedBooks[I] := BookData;
  end;

  // Salvar o movimento
  TMovementController.SaveMovement(MovementData, SelectedBooks);
end;

end.
